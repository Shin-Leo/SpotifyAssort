{"message":"unused import: `chrono::naive::serde::ts_milliseconds::serialize`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":84,"byte_end":132,"line_start":6,"line_end":6,"column_start":5,"column_end":53,"is_primary":true,"text":[{"text":"use chrono::naive::serde::ts_milliseconds::serialize;","highlight_start":5,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":80,"byte_end":133,"line_start":6,"line_end":6,"column_start":1,"column_end":54,"is_primary":true,"text":[{"text":"use chrono::naive::serde::ts_milliseconds::serialize;","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `chrono::naive::serde::ts_milliseconds::serialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse chrono::naive::serde::ts_milliseconds::serialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `chrono::naive::serde::ts_nanoseconds::deserialize`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":138,"byte_end":187,"line_start":7,"line_end":7,"column_start":5,"column_end":54,"is_primary":true,"text":[{"text":"use chrono::naive::serde::ts_nanoseconds::deserialize;","highlight_start":5,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":134,"byte_end":188,"line_start":7,"line_end":7,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"use chrono::naive::serde::ts_nanoseconds::deserialize;","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `chrono::naive::serde::ts_nanoseconds::deserialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse chrono::naive::serde::ts_nanoseconds::deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `futures::TryStreamExt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":217,"byte_end":238,"line_start":9,"line_end":9,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use futures::TryStreamExt;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":213,"byte_end":239,"line_start":9,"line_end":9,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"use futures::TryStreamExt;","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `futures::TryStreamExt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse futures::TryStreamExt;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `serde::ser::SerializeMap`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":244,"byte_end":268,"line_start":10,"line_end":10,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"use serde::ser::SerializeMap;","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":240,"byte_end":269,"line_start":10,"line_end":10,"column_start":1,"column_end":30,"is_primary":true,"text":[{"text":"use serde::ser::SerializeMap;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `serde::ser::SerializeMap`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse serde::ser::SerializeMap;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `Deserialize`, `Serialize`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":328,"byte_end":339,"line_start":14,"line_end":14,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"use serde::{Deserialize, Serialize};","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":341,"byte_end":350,"line_start":14,"line_end":14,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"use serde::{Deserialize, Serialize};","highlight_start":26,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":316,"byte_end":352,"line_start":14,"line_end":14,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"use serde::{Deserialize, Serialize};","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Deserialize`, `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:14:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse serde::{Deserialize, Serialize};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::sync::Arc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":389,"byte_end":403,"line_start":17,"line_end":17,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use std::sync::Arc;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":385,"byte_end":404,"line_start":17,"line_end":17,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"use std::sync::Arc;","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::sync::Arc`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::sync::Arc;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `json::JsonValue`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":436,"byte_end":451,"line_start":20,"line_end":20,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use json::JsonValue;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":432,"byte_end":452,"line_start":20,"line_end":20,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"use json::JsonValue;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `json::JsonValue`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse json::JsonValue;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `rocket::fairing::Fairing`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":457,"byte_end":481,"line_start":21,"line_end":21,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"use rocket::fairing::Fairing;","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":453,"byte_end":482,"line_start":21,"line_end":21,"column_start":1,"column_end":30,"is_primary":true,"text":[{"text":"use rocket::fairing::Fairing;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rocket::fairing::Fairing`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse rocket::fairing::Fairing;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `rocket::Rocket`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":548,"byte_end":562,"line_start":24,"line_end":24,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use rocket::Rocket;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":544,"byte_end":563,"line_start":24,"line_end":24,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"use rocket::Rocket;","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rocket::Rocket`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:24:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse rocket::Rocket;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `request::FromRequest`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":591,"byte_end":611,"line_start":25,"line_end":25,"column_start":28,"column_end":48,"is_primary":true,"text":[{"text":"use rocket::{http::Cookie, request::FromRequest};","highlight_start":28,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":589,"byte_end":611,"line_start":25,"line_end":25,"column_start":26,"column_end":48,"is_primary":true,"text":[{"text":"use rocket::{http::Cookie, request::FromRequest};","highlight_start":26,"highlight_end":48}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `request::FromRequest`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:25:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse rocket::{http::Cookie, request::FromRequest};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `FullTrack`, `PlayableItem`, `PlaylistItem`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":678,"byte_end":687,"line_start":28,"line_end":28,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    model::{FullTrack, PlayableItem, PlaylistItem},","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":689,"byte_end":701,"line_start":28,"line_end":28,"column_start":24,"column_end":36,"is_primary":true,"text":[{"text":"    model::{FullTrack, PlayableItem, PlaylistItem},","highlight_start":24,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":703,"byte_end":715,"line_start":28,"line_end":28,"column_start":38,"column_end":50,"is_primary":true,"text":[{"text":"    model::{FullTrack, PlayableItem, PlaylistItem},","highlight_start":38,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":670,"byte_end":722,"line_start":28,"line_end":29,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    model::{FullTrack, PlayableItem, PlaylistItem},","highlight_start":5,"highlight_end":52},{"text":"    prelude::*,","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `FullTrack`, `PlayableItem`, `PlaylistItem`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:28:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    model::{FullTrack, PlayableItem, PlaylistItem},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":3337,"byte_end":3348,"line_start":120,"line_end":120,"column_start":16,"column_end":27,"is_primary":true,"text":[{"text":"async fn index(mut cookies: &CookieJar<'_>) -> AppResponse {","highlight_start":16,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":3337,"byte_end":3341,"line_start":120,"line_end":120,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"async fn index(mut cookies: &CookieJar<'_>) -> AppResponse {","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:120:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0masync fn index(mut cookies: &CookieJar<'_>) -> AppResponse {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5081,"byte_end":5092,"line_start":168,"line_end":168,"column_start":21,"column_end":32,"is_primary":true,"text":[{"text":"    spotify.token = Some(token);","highlight_start":21,"highlight_end":32}],"label":"expected struct `Arc`, found enum `std::option::Option`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":5065,"byte_end":5078,"line_start":168,"line_end":168,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    spotify.token = Some(token);","highlight_start":5,"highlight_end":18}],"label":"expected due to the type of this binding","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `Arc<rspotify::clients::mutex::Mutex<std::option::Option<Token>>>`\n     found enum `std::option::Option<Pin<Box<dyn futures::Future<Output = Result<std::option::Option<Token>, rspotify::ClientError>> + std::marker::Send>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:168:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    spotify.token = Some(token);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `Arc`, found enum `std::option::Option`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected due to the type of this binding\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mArc<rspotify::clients::mutex::Mutex<std::option::Option<Token>>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1mstd::option::Option<Pin<Box<dyn futures::Future<Output = Result<std::option::Option<Token>, rspotify::ClientError>> + std::marker::Send>>>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"`std::option::Option<SimplifiedPlaylist>` is not a future","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5183,"byte_end":5193,"line_start":172,"line_end":172,"column_start":10,"column_end":20,"is_primary":true,"text":[{"text":"        .filter_map(Result::ok)","highlight_start":10,"highlight_end":20}],"label":"`std::option::Option<SimplifiedPlaylist>` is not a future","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `futures::Future` is not implemented for `std::option::Option<SimplifiedPlaylist>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `futures::StreamExt::filter_map`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.18/src/stream/stream/mod.rs","byte_start":14376,"byte_end":14402,"line_start":431,"line_end":431,"column_start":14,"column_end":40,"is_primary":true,"text":[{"text":"        Fut: Future<Output = Option<T>>,","highlight_start":14,"highlight_end":40}],"label":"required by this bound in `futures::StreamExt::filter_map`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `std::option::Option<SimplifiedPlaylist>` is not a future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:172:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        .filter_map(Result::ok)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`std::option::Option<SimplifiedPlaylist>` is not a future\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `futures::Future` is not implemented for `std::option::Option<SimplifiedPlaylist>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `futures::StreamExt::filter_map`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.18/src/stream/stream/mod.rs:431:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Fut: Future<Output = Option<T>>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `futures::StreamExt::filter_map`\u001b[0m\n\n"}
{"message":"the method `collect` exists for struct `futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5215,"byte_end":5222,"line_start":173,"line_end":173,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .collect::<Vec<_>>();","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9808,"byte_end":9988,"line_start":332,"line_end":339,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $vis struct $ident $($def_generics)*","highlight_start":9,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"doesn't satisfy `_: Iterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":50730,"byte_end":52017,"line_start":1510,"line_end":1546,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":9,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":49535,"byte_end":49742,"line_start":1470,"line_end":1476,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! {","highlight_start":9,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":49535,"byte_end":49742,"line_start":1470,"line_end":1476,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! {","highlight_start":9,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":8598,"byte_end":8682,"line_start":293,"line_end":296,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! {","highlight_start":9,"highlight_end":42},{"text":"            [][][][]","highlight_start":1,"highlight_end":21},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.18/src/stream/stream/filter_map.rs","byte_start":293,"byte_end":577,"line_start":12,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pin_project! {","highlight_start":1,"highlight_end":15},{"text":"    /// Stream for the [`filter_map`](super::StreamExt::filter_map) method.","highlight_start":1,"highlight_end":76},{"text":"    #[must_use = \"streams do nothing unless polled\"]","highlight_start":1,"highlight_end":53},{"text":"    pub struct FilterMap<St, Fut, F> {","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        stream: St,","highlight_start":1,"highlight_end":20},{"text":"        f: F,","highlight_start":1,"highlight_end":14},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        pending: Option<Fut>,","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"pin_project!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":8541,"byte_end":8691,"line_start":291,"line_end":298,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! pin_project {","highlight_start":1,"highlight_end":27},{"text":"    ($($tt:tt)*) => {","highlight_start":1,"highlight_end":22},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [][][][]","highlight_start":1,"highlight_end":21},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9808,"byte_end":9988,"line_start":332,"line_end":339,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $vis struct $ident $($def_generics)*","highlight_start":9,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"doesn't satisfy `_: StreamExt`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":50730,"byte_end":52017,"line_start":1510,"line_end":1546,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":9,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":49535,"byte_end":49742,"line_start":1470,"line_end":1476,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! {","highlight_start":9,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":49535,"byte_end":49742,"line_start":1470,"line_end":1476,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! {","highlight_start":9,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":8598,"byte_end":8682,"line_start":293,"line_end":296,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! {","highlight_start":9,"highlight_end":42},{"text":"            [][][][]","highlight_start":1,"highlight_end":21},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.18/src/stream/stream/filter_map.rs","byte_start":293,"byte_end":577,"line_start":12,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pin_project! {","highlight_start":1,"highlight_end":15},{"text":"    /// Stream for the [`filter_map`](super::StreamExt::filter_map) method.","highlight_start":1,"highlight_end":76},{"text":"    #[must_use = \"streams do nothing unless polled\"]","highlight_start":1,"highlight_end":53},{"text":"    pub struct FilterMap<St, Fut, F> {","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        stream: St,","highlight_start":1,"highlight_end":20},{"text":"        f: F,","highlight_start":1,"highlight_end":14},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        pending: Option<Fut>,","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"pin_project!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":8541,"byte_end":8691,"line_start":291,"line_end":298,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! pin_project {","highlight_start":1,"highlight_end":27},{"text":"    ($($tt:tt)*) => {","highlight_start":1,"highlight_end":22},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [][][][]","highlight_start":1,"highlight_end":21},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9808,"byte_end":9988,"line_start":332,"line_end":339,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $vis struct $ident $($def_generics)*","highlight_start":9,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"doesn't satisfy `_: futures::Stream`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":50730,"byte_end":52017,"line_start":1510,"line_end":1546,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":9,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":49535,"byte_end":49742,"line_start":1470,"line_end":1476,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! {","highlight_start":9,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":49535,"byte_end":49742,"line_start":1470,"line_end":1476,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! {","highlight_start":9,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":8598,"byte_end":8682,"line_start":293,"line_end":296,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::__pin_project_internal! {","highlight_start":9,"highlight_end":42},{"text":"            [][][][]","highlight_start":1,"highlight_end":21},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.18/src/stream/stream/filter_map.rs","byte_start":293,"byte_end":577,"line_start":12,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pin_project! {","highlight_start":1,"highlight_end":15},{"text":"    /// Stream for the [`filter_map`](super::StreamExt::filter_map) method.","highlight_start":1,"highlight_end":76},{"text":"    #[must_use = \"streams do nothing unless polled\"]","highlight_start":1,"highlight_end":53},{"text":"    pub struct FilterMap<St, Fut, F> {","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        stream: St,","highlight_start":1,"highlight_end":20},{"text":"        f: F,","highlight_start":1,"highlight_end":14},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        pending: Option<Fut>,","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"pin_project!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":8541,"byte_end":8691,"line_start":291,"line_end":298,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! pin_project {","highlight_start":1,"highlight_end":27},{"text":"    ($($tt:tt)*) => {","highlight_start":1,"highlight_end":22},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [][][][]","highlight_start":1,"highlight_end":21},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__pin_project_internal!","def_site_span":{"file_name":"/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/pin-project-lite-0.2.7/src/lib.rs","byte_start":9093,"byte_end":59428,"line_start":312,"line_end":1773,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __pin_project_internal {","highlight_start":1,"highlight_end":38},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:main","highlight_start":1,"highlight_end":19},{"text":"    (@struct=>internal;","highlight_start":1,"highlight_end":24},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis struct $ident:ident]","highlight_start":1,"highlight_end":58},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis struct $ident $($def_generics)*","highlight_start":1,"highlight_end":45},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $field_ty","highlight_start":1,"highlight_end":45},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":80},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(explicit_outlives_requirements)] // https://github.com/rust-lang/rust/issues/60993","highlight_start":1,"highlight_end":99},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":50},{"text":"                [make_proj_field_mut]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":78},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":53},{"text":"                [make_proj_field_ref]","highlight_start":1,"highlight_end":38},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $crate::__pin_project_internal! { @struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":86},{"text":"                [$proj_vis]","highlight_start":1,"highlight_end":28},{"text":"                [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":61},{"text":"                [make_proj_field_replace]","highlight_start":1,"highlight_end":42},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin])?","highlight_start":1,"highlight_end":36},{"text":"                        $field_vis $field: $field_ty","highlight_start":1,"highlight_end":53},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?][Projection]","highlight_start":1,"highlight_end":54},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":77},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?][ProjectionRef]","highlight_start":1,"highlight_end":57},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":85},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?][ProjectionReplace]","highlight_start":1,"highlight_end":65},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field_vis $field","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $field: $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                        $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":46},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Ensure that it's impossible to use pin projections on a #[repr(packed)] struct.","highlight_start":1,"highlight_end":95},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Taking a reference to a packed field is UB, and applying","highlight_start":1,"highlight_end":72},{"text":"            // `#[forbid(unaligned_references)]` makes sure that doing this is a hard error.","highlight_start":1,"highlight_end":93},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // If the struct ends up having #[repr(packed)] applied somehow,","highlight_start":1,"highlight_end":77},{"text":"            // this will generate an (unfriendly) error message. Under all reasonable","highlight_start":1,"highlight_end":86},{"text":"            // circumstances, we'll detect the #[repr(packed)] attribute, and generate","highlight_start":1,"highlight_end":87},{"text":"            // a much nicer error above.","highlight_start":1,"highlight_end":41},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // See https://github.com/taiki-e/pin-project/pull/34 for more details.","highlight_start":1,"highlight_end":84},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // Note:","highlight_start":1,"highlight_end":21},{"text":"            // - Lint-based tricks aren't perfect, but they're much better than nothing:","highlight_start":1,"highlight_end":89},{"text":"            //   https://github.com/taiki-e/pin-project-lite/issues/26","highlight_start":1,"highlight_end":71},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // - Enable both unaligned_references and safe_packed_borrows lints","highlight_start":1,"highlight_end":80},{"text":"            //   because unaligned_references lint does not exist in older compilers:","highlight_start":1,"highlight_end":86},{"text":"            //   https://github.com/taiki-e/pin-project-lite/pull/55","highlight_start":1,"highlight_end":69},{"text":"            //   https://github.com/rust-lang/rust/pull/82525","highlight_start":1,"highlight_end":62},{"text":"            #[forbid(unaligned_references, safe_packed_borrows)]","highlight_start":1,"highlight_end":65},{"text":"            fn __assert_not_repr_packed <$($impl_generics)*> (this: &$ident <$($ty_generics)*>)","highlight_start":1,"highlight_end":96},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let _ = &this.$field;","highlight_start":1,"highlight_end":42},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:main","highlight_start":1,"highlight_end":17},{"text":"    (@enum=>internal;","highlight_start":1,"highlight_end":22},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$(#[$attrs:meta])* $vis:vis enum $ident:ident]","highlight_start":1,"highlight_end":56},{"text":"        [$($def_generics:tt)*]","highlight_start":1,"highlight_end":31},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)*)?]","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$attrs])*","highlight_start":1,"highlight_end":22},{"text":"        $vis enum $ident $($def_generics)*","highlight_start":1,"highlight_end":43},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs])*","highlight_start":1,"highlight_end":38},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $field_ty","highlight_start":1,"highlight_end":42},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_mut]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_ty;","highlight_start":1,"highlight_end":63},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [make_proj_field_ref]","highlight_start":1,"highlight_end":34},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $crate::__pin_project_internal! { @enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":71},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [make_proj_field_replace]","highlight_start":1,"highlight_end":38},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            [$(impl $($pinned_drop)*)?]","highlight_start":1,"highlight_end":40},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::used_underscore_binding)]","highlight_start":1,"highlight_end":50},{"text":"        const _: () = {","highlight_start":1,"highlight_end":24},{"text":"            impl <$($impl_generics)*> $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":64},{"text":"            $(where","highlight_start":1,"highlight_end":20},{"text":"                $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project get_unchecked_mut mut]","highlight_start":1,"highlight_end":52},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_method;","highlight_start":1,"highlight_end":75},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":42},{"text":"                    [project_ref get_ref]","highlight_start":1,"highlight_end":42},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                $crate::__pin_project_internal! { @enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":83},{"text":"                    [$proj_vis]","highlight_start":1,"highlight_end":32},{"text":"                    [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":46},{"text":"                    [$($ty_generics)*]","highlight_start":1,"highlight_end":39},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $variant $({","highlight_start":1,"highlight_end":41},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $(#[$pin])?","highlight_start":1,"highlight_end":48},{"text":"                                    $field","highlight_start":1,"highlight_end":43},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_unpin_impl;","highlight_start":1,"highlight_end":64},{"text":"                [$vis $ident]","highlight_start":1,"highlight_end":30},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $variant: ($(","highlight_start":1,"highlight_end":34},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $crate::__pin_project_internal!(@make_unpin_bound;","highlight_start":1,"highlight_end":79},{"text":"                                $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":54},{"text":"                            )","highlight_start":1,"highlight_end":30},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    )?)","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            $crate::__pin_project_internal! { @make_drop_impl;","highlight_start":1,"highlight_end":63},{"text":"                [$ident]","highlight_start":1,"highlight_end":25},{"text":"                [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":86},{"text":"                $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // We don't need to check for '#[repr(packed)]',","highlight_start":1,"highlight_end":61},{"text":"            // since it does not apply to enums.","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_ty","highlight_start":1,"highlight_end":27},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_ty=>unnamed;","highlight_start":1,"highlight_end":37},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":72},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident]","highlight_start":1,"highlight_end":29},{"text":"            [$make_proj_field]","highlight_start":1,"highlight_end":31},{"text":"            [$ident]","highlight_start":1,"highlight_end":21},{"text":"            [$($impl_generics)*] [$($ty_generics)*] [$(where $($where_clause)*)?]","highlight_start":1,"highlight_end":82},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_ty=>named;","highlight_start":1,"highlight_end":35},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$_proj_ty_ident:ident][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>unnamed;","highlight_start":1,"highlight_end":45},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis struct $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":61},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field_vis $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":86},{"text":"                    $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":42},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_ty=>named;","highlight_start":1,"highlight_end":43},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_ty","highlight_start":1,"highlight_end":25},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        // This lint warns of `clippy::*` generated by external macros.","highlight_start":1,"highlight_end":72},{"text":"        // We allow this lint for compatibility with older compilers.","highlight_start":1,"highlight_end":70},{"text":"        #[allow(clippy::unknown_clippy_lints)]","highlight_start":1,"highlight_end":47},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::ref_option_ref)] // This lint warns `&Option<&<ty>>`. (only needed for project_ref)","highlight_start":1,"highlight_end":108},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":67},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ident <$($ty_generics)*>: '__pin","highlight_start":1,"highlight_end":46},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_ty;","highlight_start":1,"highlight_end":26},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        #[allow(dead_code)] // This lint warns unused fields/variants.","highlight_start":1,"highlight_end":71},{"text":"        #[allow(single_use_lifetimes)] // https://github.com/rust-lang/rust/issues/55058","highlight_start":1,"highlight_end":89},{"text":"        #[allow(clippy::mut_mut)] // This lint warns `&mut &mut <ty>`. (only needed for project)","highlight_start":1,"highlight_end":97},{"text":"        #[allow(clippy::redundant_pub_crate)] // This lint warns `pub(crate)` field in private struct.","highlight_start":1,"highlight_end":103},{"text":"        #[allow(clippy::type_repetition_in_bounds)] // https://github.com/rust-lang/rust-clippy/issues/4326","highlight_start":1,"highlight_end":108},{"text":"        $proj_vis enum $proj_ty_ident <$($impl_generics)*>","highlight_start":1,"highlight_end":59},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $($($where_clause)*)?","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant $({","highlight_start":1,"highlight_end":29},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@$make_proj_field;","highlight_start":1,"highlight_end":83},{"text":"                            $(#[$pin])? $field_ty","highlight_start":1,"highlight_end":50},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_ty;","highlight_start":1,"highlight_end":34},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$make_proj_field:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        [$(impl $($pinned_drop:tt)*)?]","highlight_start":1,"highlight_end":39},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        let result = $($proj_path)* {","highlight_start":1,"highlight_end":38},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $field: $crate::__pin_project_internal!(@make_replace_field_proj;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            ( $(","highlight_start":1,"highlight_end":17},{"text":"                $crate::__pin_project_internal!(@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":82},{"text":"                    $(#[$pin])? $field","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"            )* );","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_replace_block;","highlight_start":1,"highlight_end":31},{"text":"        [$($proj_path: tt)+]","highlight_start":1,"highlight_end":29},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $($proj_path)*","highlight_start":1,"highlight_end":23},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // struct:make_proj_method","highlight_start":1,"highlight_end":31},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let Self { $($field),* } = self.$get_method();","highlight_start":1,"highlight_end":63},{"text":"                $proj_ty_ident {","highlight_start":1,"highlight_end":33},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $field: $crate::__pin_project_internal!(@make_unsafe_field_proj;","highlight_start":1,"highlight_end":89},{"text":"                            $(#[$pin])? $field","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_method;","highlight_start":1,"highlight_end":32},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>make_proj_method;","highlight_start":1,"highlight_end":69},{"text":"            [$proj_vis]","highlight_start":1,"highlight_end":24},{"text":"            [$proj_ty_ident][$proj_ty_ident]","highlight_start":1,"highlight_end":45},{"text":"            [$method_ident $get_method $($mut)?]","highlight_start":1,"highlight_end":49},{"text":"            [$($ty_generics)*]","highlight_start":1,"highlight_end":31},{"text":"            $($variant)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident][$_proj_ty_ident:ident]","highlight_start":1,"highlight_end":54},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident","highlight_start":1,"highlight_end":44},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let Self { $($field),* } = &mut *__self_ptr;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":74},{"text":"                    [$proj_ty_ident]","highlight_start":1,"highlight_end":37},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field","highlight_start":1,"highlight_end":35},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@struct=>make_proj_replace_method;","highlight_start":1,"highlight_end":40},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [][$proj_ty_ident:ident]","highlight_start":1,"highlight_end":33},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // enum:make_proj_method","highlight_start":1,"highlight_end":29},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn $method_ident<'__pin>(","highlight_start":1,"highlight_end":44},{"text":"            self: $crate::__private::Pin<&'__pin $($mut)? Self>,","highlight_start":1,"highlight_end":65},{"text":"        ) -> $proj_ty_ident <'__pin, $($ty_generics)*> {","highlight_start":1,"highlight_end":57},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                match self.$get_method() {","highlight_start":1,"highlight_end":43},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $proj_ty_ident::$variant $({","highlight_start":1,"highlight_end":57},{"text":"                                $(","highlight_start":1,"highlight_end":35},{"text":"                                    $field: $crate::__pin_project_internal!(","highlight_start":1,"highlight_end":77},{"text":"                                        @make_unsafe_field_proj;","highlight_start":1,"highlight_end":65},{"text":"                                        $(#[$pin])? $field","highlight_start":1,"highlight_end":59},{"text":"                                    )","highlight_start":1,"highlight_end":38},{"text":"                                ),+","highlight_start":1,"highlight_end":36},{"text":"                            })?","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_method;","highlight_start":1,"highlight_end":30},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$method_ident:ident $get_method:ident $($mut:ident)?]","highlight_start":1,"highlight_end":63},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        [$proj_ty_ident:ident]","highlight_start":1,"highlight_end":31},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident","highlight_start":1,"highlight_end":37},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $proj_vis fn project_replace(","highlight_start":1,"highlight_end":38},{"text":"            self: $crate::__private::Pin<&mut Self>,","highlight_start":1,"highlight_end":53},{"text":"            replacement: Self,","highlight_start":1,"highlight_end":31},{"text":"        ) -> $proj_ty_ident <$($ty_generics)*> {","highlight_start":1,"highlight_end":49},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                let __self_ptr: *mut Self = self.get_unchecked_mut();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Destructors will run in reverse order, so next create a guard to overwrite","highlight_start":1,"highlight_end":94},{"text":"                // `self` with the replacement value without calling destructors.","highlight_start":1,"highlight_end":82},{"text":"                let __guard = $crate::__private::UnsafeOverwriteGuard {","highlight_start":1,"highlight_end":72},{"text":"                    target: __self_ptr,","highlight_start":1,"highlight_end":40},{"text":"                    value: $crate::__private::ManuallyDrop::new(replacement),","highlight_start":1,"highlight_end":78},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                match &mut *__self_ptr {","highlight_start":1,"highlight_end":41},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        Self::$variant $({","highlight_start":1,"highlight_end":43},{"text":"                            $($field),+","highlight_start":1,"highlight_end":40},{"text":"                        })? => {","highlight_start":1,"highlight_end":33},{"text":"                            $crate::__pin_project_internal!{@make_proj_replace_block;","highlight_start":1,"highlight_end":86},{"text":"                                [$proj_ty_ident :: $variant]","highlight_start":1,"highlight_end":61},{"text":"                                $({","highlight_start":1,"highlight_end":36},{"text":"                                    $(","highlight_start":1,"highlight_end":39},{"text":"                                        $(#[$pin])?","highlight_start":1,"highlight_end":52},{"text":"                                        $field","highlight_start":1,"highlight_end":47},{"text":"                                    ),+","highlight_start":1,"highlight_end":40},{"text":"                                })?","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ),+","highlight_start":1,"highlight_end":24},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@enum=>make_proj_replace_method;","highlight_start":1,"highlight_end":38},{"text":"        [$proj_vis:vis]","highlight_start":1,"highlight_end":24},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($ty_generics:tt)*]","highlight_start":1,"highlight_end":30},{"text":"        $($variant:tt)*","highlight_start":1,"highlight_end":24},{"text":"    ) => {};","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_impl","highlight_start":1,"highlight_end":23},{"text":"    (@make_unpin_impl;","highlight_start":1,"highlight_end":23},{"text":"        [$vis:vis $ident:ident]","highlight_start":1,"highlight_end":32},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"        $($field:tt)*","highlight_start":1,"highlight_end":22},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Automatically create the appropriate conditional `Unpin` implementation.","highlight_start":1,"highlight_end":84},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // Basically this is equivalent to the following code:","highlight_start":1,"highlight_end":63},{"text":"        // ```rust","highlight_start":1,"highlight_end":19},{"text":"        // impl<T, U> Unpin for Struct<T, U> where T: Unpin {}","highlight_start":1,"highlight_end":63},{"text":"        // ```","highlight_start":1,"highlight_end":15},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // However, if struct is public and there is a private type field,","highlight_start":1,"highlight_end":75},{"text":"        // this would cause an E0446 (private type in public interface).","highlight_start":1,"highlight_end":73},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // When RFC 2145 is implemented (rust-lang/rust#48054),","highlight_start":1,"highlight_end":64},{"text":"        // this will become a lint, rather then a hard error.","highlight_start":1,"highlight_end":62},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // As a workaround for this, we generate a new struct, containing all of the pinned","highlight_start":1,"highlight_end":92},{"text":"        // fields from our #[pin_project] type. This struct is declared within","highlight_start":1,"highlight_end":79},{"text":"        // a function, which makes it impossible to be named by user code.","highlight_start":1,"highlight_end":75},{"text":"        // This guarantees that it will use the default auto-trait impl for Unpin -","highlight_start":1,"highlight_end":84},{"text":"        // that is, it will implement Unpin iff all of its fields implement Unpin.","highlight_start":1,"highlight_end":83},{"text":"        // This type can be safely declared as 'public', satisfying the privacy","highlight_start":1,"highlight_end":80},{"text":"        // checker without actually allowing user code to access it.","highlight_start":1,"highlight_end":69},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // This allows users to apply the #[pin_project] attribute to types","highlight_start":1,"highlight_end":76},{"text":"        // regardless of the privacy of the types of their fields.","highlight_start":1,"highlight_end":67},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // See also https://github.com/taiki-e/pin-project/pull/53.","highlight_start":1,"highlight_end":68},{"text":"        #[allow(non_snake_case)]","highlight_start":1,"highlight_end":33},{"text":"        $vis struct __Origin <'__pin, $($impl_generics)*>","highlight_start":1,"highlight_end":58},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            __dummy_lifetime: $crate::__private::PhantomData<&'__pin ()>,","highlight_start":1,"highlight_end":74},{"text":"            $($field)*","highlight_start":1,"highlight_end":23},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl <'__pin, $($impl_generics)*> $crate::__private::Unpin for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":97},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            __Origin <'__pin, $($ty_generics)*>: $crate::__private::Unpin","highlight_start":1,"highlight_end":74},{"text":"            $(, $($where_clause)*)?","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_drop_impl","highlight_start":1,"highlight_end":22},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$_ident:ident]","highlight_start":1,"highlight_end":24},{"text":"        [$($_impl_generics:tt)*] [$($_ty_generics:tt)*] [$(where $($_where_clause:tt)* )?]","highlight_start":1,"highlight_end":91},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? PinnedDrop for $self_ty:ty","highlight_start":1,"highlight_end":39},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop($($arg:ident)+: Pin<&mut Self>) {","highlight_start":1,"highlight_end":54},{"text":"                $($tt:tt)*","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        impl $(<","highlight_start":1,"highlight_end":17},{"text":"            $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":51},{"text":"            $( $generics","highlight_start":1,"highlight_end":25},{"text":"                $(: $generics_bound)?","highlight_start":1,"highlight_end":38},{"text":"                $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":47},{"text":"                $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":47},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        >)? $crate::__private::Drop for $self_ty","highlight_start":1,"highlight_end":49},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty","highlight_start":1,"highlight_end":32},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),*","highlight_start":1,"highlight_end":16},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn drop(&mut self) {","highlight_start":1,"highlight_end":33},{"text":"                // Implementing `__DropInner::__drop_inner` is safe, but calling it is not safe.","highlight_start":1,"highlight_end":97},{"text":"                // This is because destructors can be called multiple times in safe code and","highlight_start":1,"highlight_end":93},{"text":"                // [double dropping is unsound](https://github.com/rust-lang/rust/pull/62360).","highlight_start":1,"highlight_end":95},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // `__drop_inner` is defined as a safe method, but this is fine since","highlight_start":1,"highlight_end":86},{"text":"                // `__drop_inner` is not accessible by the users and we call `__drop_inner` only","highlight_start":1,"highlight_end":97},{"text":"                // once.","highlight_start":1,"highlight_end":25},{"text":"                //","highlight_start":1,"highlight_end":19},{"text":"                // Users can implement [`Drop`] safely using `pin_project!` and can drop a","highlight_start":1,"highlight_end":91},{"text":"                // type that implements `PinnedDrop` using the [`drop`] function safely.","highlight_start":1,"highlight_end":89},{"text":"                fn __drop_inner $(<","highlight_start":1,"highlight_end":36},{"text":"                    $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":59},{"text":"                    $( $generics","highlight_start":1,"highlight_end":33},{"text":"                        $(: $generics_bound)?","highlight_start":1,"highlight_end":46},{"text":"                        $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":55},{"text":"                        $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":55},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                >)? (","highlight_start":1,"highlight_end":22},{"text":"                    $($arg)+: $crate::__private::Pin<&mut $self_ty>,","highlight_start":1,"highlight_end":69},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"                $(where","highlight_start":1,"highlight_end":24},{"text":"                    $( $where_clause_ty","highlight_start":1,"highlight_end":40},{"text":"                        $(: $where_clause_bound)?","highlight_start":1,"highlight_end":50},{"text":"                        $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":59},{"text":"                        $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":59},{"text":"                    ),*","highlight_start":1,"highlight_end":24},{"text":"                )?","highlight_start":1,"highlight_end":19},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // A dummy `__drop_inner` function to prevent users call outer `__drop_inner`.","highlight_start":1,"highlight_end":99},{"text":"                    fn __drop_inner() {}","highlight_start":1,"highlight_end":41},{"text":"                    $($tt)*","highlight_start":1,"highlight_end":28},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Safety - we're in 'drop', so we know that 'self' will","highlight_start":1,"highlight_end":73},{"text":"                // never move again.","highlight_start":1,"highlight_end":37},{"text":"                let pinned_self: $crate::__private::Pin<&mut Self>","highlight_start":1,"highlight_end":67},{"text":"                    = unsafe { $crate::__private::Pin::new_unchecked(self) };","highlight_start":1,"highlight_end":78},{"text":"                // We call `__drop_inner` only once. Since `__DropInner::__drop_inner`","highlight_start":1,"highlight_end":87},{"text":"                // is not accessible by the users, it is never called again.","highlight_start":1,"highlight_end":77},{"text":"                __drop_inner(pinned_self);","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_drop_impl;","highlight_start":1,"highlight_end":22},{"text":"        [$ident:ident]","highlight_start":1,"highlight_end":23},{"text":"        [$($impl_generics:tt)*] [$($ty_generics:tt)*] [$(where $($where_clause:tt)* )?]","highlight_start":1,"highlight_end":88},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        // Ensure that struct does not implement `Drop`.","highlight_start":1,"highlight_end":57},{"text":"        //","highlight_start":1,"highlight_end":11},{"text":"        // There are two possible cases:","highlight_start":1,"highlight_end":41},{"text":"        // 1. The user type does not implement Drop. In this case,","highlight_start":1,"highlight_end":67},{"text":"        // the first blanked impl will not apply to it. This code","highlight_start":1,"highlight_end":66},{"text":"        // will compile, as there is only one impl of MustNotImplDrop for the user type","highlight_start":1,"highlight_end":88},{"text":"        // 2. The user type does impl Drop. This will make the blanket impl applicable,","highlight_start":1,"highlight_end":88},{"text":"        // which will then conflict with the explicit MustNotImplDrop impl below.","highlight_start":1,"highlight_end":82},{"text":"        // This will result in a compilation error, which is exactly what we want.","highlight_start":1,"highlight_end":83},{"text":"        trait MustNotImplDrop {}","highlight_start":1,"highlight_end":33},{"text":"        #[allow(clippy::drop_bounds, drop_bounds)]","highlight_start":1,"highlight_end":51},{"text":"        impl<T: $crate::__private::Drop> MustNotImplDrop for T {}","highlight_start":1,"highlight_end":66},{"text":"        impl <$($impl_generics)*> MustNotImplDrop for $ident <$($ty_generics)*>","highlight_start":1,"highlight_end":80},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $($where_clause)*)?","highlight_start":1,"highlight_end":32},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unpin_bound","highlight_start":1,"highlight_end":24},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unpin_bound;","highlight_start":1,"highlight_end":24},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::AlwaysUnpin<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_field_proj","highlight_start":1,"highlight_end":30},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin::new_unchecked($field)","highlight_start":1,"highlight_end":54},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_field_proj;","highlight_start":1,"highlight_end":30},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field","highlight_start":1,"highlight_end":15},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_replace_field_proj","highlight_start":1,"highlight_end":31},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_replace_field_proj;","highlight_start":1,"highlight_end":31},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::ptr::read($field)","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_unsafe_drop_in_place_guard","highlight_start":1,"highlight_end":39},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::UnsafeDropInPlaceGuard($field)","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_unsafe_drop_in_place_guard;","highlight_start":1,"highlight_end":39},{"text":"        $field:ident","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        ()","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // make_proj_field","highlight_start":1,"highlight_end":23},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin mut ($field_ty)>","highlight_start":1,"highlight_end":56},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_mut;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin mut ($field_ty)","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::Pin<&'__pin ($field_ty)>","highlight_start":1,"highlight_end":52},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_ref;","highlight_start":1,"highlight_end":27},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        &'__pin ($field_ty)","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        #[pin]","highlight_start":1,"highlight_end":15},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__private::PhantomData<$field_ty>","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@make_proj_field_replace;","highlight_start":1,"highlight_end":31},{"text":"        $field_ty:ty","highlight_start":1,"highlight_end":21},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $field_ty","highlight_start":1,"highlight_end":18},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // =============================================================================================","highlight_start":1,"highlight_end":101},{"text":"    // Parses input and determines visibility","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project = $proj_mut_ident:ident]","highlight_start":1,"highlight_end":43},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$proj_mut_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_ref = $proj_ref_ident:ident]","highlight_start":1,"highlight_end":47},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_ref_ident]","highlight_start":1,"highlight_end":30},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        []","highlight_start":1,"highlight_end":11},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[project_replace = $proj_replace_ident:ident]","highlight_start":1,"highlight_end":55},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$proj_replace_ident]","highlight_start":1,"highlight_end":34},{"text":"            [$($attrs)*]","highlight_start":1,"highlight_end":25},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[$($attr:tt)*]","highlight_start":1,"highlight_end":24},{"text":"        $($tt:tt)*","highlight_start":1,"highlight_end":19},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! {","highlight_start":1,"highlight_end":42},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$($attrs)* #[$($attr)*]]","highlight_start":1,"highlight_end":38},{"text":"            $($tt)*","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // struct","highlight_start":1,"highlight_end":14},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub struct $ident:ident $(<","highlight_start":1,"highlight_end":36},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub struct $ident]","highlight_start":1,"highlight_end":43},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis struct $ident:ident $(<","highlight_start":1,"highlight_end":41},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$pin:ident])?","highlight_start":1,"highlight_end":34},{"text":"                $field_vis:vis $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":58},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @struct=>internal;","highlight_start":1,"highlight_end":61},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis struct $ident]","highlight_start":1,"highlight_end":44},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$pin])?","highlight_start":1,"highlight_end":32},{"text":"                    $field_vis $field: $field_ty","highlight_start":1,"highlight_end":49},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // enum","highlight_start":1,"highlight_end":12},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub enum $ident:ident $(<","highlight_start":1,"highlight_end":34},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [pub(crate)]","highlight_start":1,"highlight_end":25},{"text":"            [$($attrs)* pub enum $ident]","highlight_start":1,"highlight_end":41},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        [$($proj_mut_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_ref_ident:ident)?]","highlight_start":1,"highlight_end":36},{"text":"        [$($proj_replace_ident:ident)?]","highlight_start":1,"highlight_end":40},{"text":"        [$($attrs:tt)*]","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $vis:vis enum $ident:ident $(<","highlight_start":1,"highlight_end":39},{"text":"            $( $lifetime:lifetime $(: $lifetime_bound:lifetime)? ),* $(,)?","highlight_start":1,"highlight_end":75},{"text":"            $( $generics:ident","highlight_start":1,"highlight_end":31},{"text":"                $(: $generics_bound:path)?","highlight_start":1,"highlight_end":43},{"text":"                $(: ?$generics_unsized_bound:path)?","highlight_start":1,"highlight_end":52},{"text":"                $(: $generics_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":56},{"text":"                $(= $generics_default:ty)?","highlight_start":1,"highlight_end":43},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        >)?","highlight_start":1,"highlight_end":12},{"text":"        $(where","highlight_start":1,"highlight_end":16},{"text":"            $( $where_clause_ty:ty","highlight_start":1,"highlight_end":35},{"text":"                $(: $where_clause_bound:path)?","highlight_start":1,"highlight_end":47},{"text":"                $(: ?$where_clause_unsized_bound:path)?","highlight_start":1,"highlight_end":56},{"text":"                $(: $where_clause_lifetime_bound:lifetime)?","highlight_start":1,"highlight_end":60},{"text":"            ),* $(,)?","highlight_start":1,"highlight_end":22},{"text":"        )?","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                $(#[$variant_attrs:meta])*","highlight_start":1,"highlight_end":43},{"text":"                $variant:ident $({","highlight_start":1,"highlight_end":35},{"text":"                    $(","highlight_start":1,"highlight_end":23},{"text":"                        $(#[$pin:ident])?","highlight_start":1,"highlight_end":42},{"text":"                        $field:ident: $field_ty:ty","highlight_start":1,"highlight_end":51},{"text":"                    ),+ $(,)?","highlight_start":1,"highlight_end":30},{"text":"                })?","highlight_start":1,"highlight_end":20},{"text":"            ),+ $(,)?","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(impl $($pinned_drop:tt)*)?","highlight_start":1,"highlight_end":37},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::__pin_project_internal! { @enum=>internal;","highlight_start":1,"highlight_end":59},{"text":"            [$($proj_mut_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_ref_ident)?]","highlight_start":1,"highlight_end":34},{"text":"            [$($proj_replace_ident)?]","highlight_start":1,"highlight_end":38},{"text":"            [$vis]","highlight_start":1,"highlight_end":19},{"text":"            [$($attrs)* $vis enum $ident]","highlight_start":1,"highlight_end":42},{"text":"            [$(<","highlight_start":1,"highlight_end":17},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(= $generics_default)?","highlight_start":1,"highlight_end":44},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            >)?]","highlight_start":1,"highlight_end":17},{"text":"            [$(","highlight_start":1,"highlight_end":16},{"text":"                $( $lifetime $(: $lifetime_bound)? ,)*","highlight_start":1,"highlight_end":55},{"text":"                $( $generics","highlight_start":1,"highlight_end":29},{"text":"                    $(: $generics_bound)?","highlight_start":1,"highlight_end":42},{"text":"                    $(: ?$generics_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                    $(: $generics_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"                ),*","highlight_start":1,"highlight_end":20},{"text":"            )?]","highlight_start":1,"highlight_end":16},{"text":"            [$( $( $lifetime ,)* $( $generics ),* )?]","highlight_start":1,"highlight_end":54},{"text":"            [$(where $( $where_clause_ty","highlight_start":1,"highlight_end":41},{"text":"                $(: $where_clause_bound)?","highlight_start":1,"highlight_end":42},{"text":"                $(: ?$where_clause_unsized_bound)?","highlight_start":1,"highlight_end":51},{"text":"                $(: $where_clause_lifetime_bound)?","highlight_start":1,"highlight_end":51},{"text":"            ),* )?]","highlight_start":1,"highlight_end":20},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    $(#[$variant_attrs])*","highlight_start":1,"highlight_end":42},{"text":"                    $variant $({","highlight_start":1,"highlight_end":33},{"text":"                        $(","highlight_start":1,"highlight_end":27},{"text":"                            $(#[$pin])?","highlight_start":1,"highlight_end":40},{"text":"                            $field: $field_ty","highlight_start":1,"highlight_end":46},{"text":"                        ),+","highlight_start":1,"highlight_end":28},{"text":"                    })?","highlight_start":1,"highlight_end":24},{"text":"                ),+","highlight_start":1,"highlight_end":20},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            $(impl $($pinned_drop)*)?","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following trait bounds were not satisfied:\n`futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: futures::Stream`\nwhich is required by `futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: StreamExt`\n`&futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: futures::Stream`\nwhich is required by `&futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: StreamExt`\n`&mut futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: futures::Stream`\nwhich is required by `&mut futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: StreamExt`\n`futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: Iterator`\nwhich is required by `&mut futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `collect` exists for struct `futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:173:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .collect::<Vec<_>>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/leoshin/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.18/src/stream/stream/filter_map.rs:12:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpin_project! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Stream for the [`filter_map`](super::StreamExt::filter_map) method.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[must_use = \"streams do nothing unless polled\"]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct FilterMap<St, Fut, F> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Iterator`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: StreamExt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: futures::Stream`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: StreamExt`\u001b[0m\n\u001b[0m            `&futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `&futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: StreamExt`\u001b[0m\n\u001b[0m            `&mut futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: futures::Stream`\u001b[0m\n\u001b[0m            which is required by `&mut futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: StreamExt`\u001b[0m\n\u001b[0m            `futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: Iterator`\u001b[0m\n\u001b[0m            which is required by `&mut futures::stream::FilterMap<futures::stream::Take<Pin<Box<dyn futures::Stream<Item = Result<SimplifiedPlaylist, rspotify::ClientError>>>>>, std::option::Option<SimplifiedPlaylist>, fn(Result<SimplifiedPlaylist, rspotify::ClientError>) -> std::option::Option<SimplifiedPlaylist> {Result::<SimplifiedPlaylist, rspotify::ClientError>::ok}>: Iterator`\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors; 12 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors; 12 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0308, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
